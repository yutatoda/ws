version: 0.2

run-as: root

env:
  variables:
    DOCKER_BUILDKIT: "1"
    NGINX_APP_NAME: "nginx"
    NGINX_DOCKER_BUILD_PATH: "."
    APP_APP_NAME: "php-fpm"
    APP_DOCKER_BUILD_PATH: "."


phases:
  pre_build:
    commands:
      ## Variables
      - CLUSTER_NAME=${build_vars_cluster}
      - SERVICE_NAME=${build_vars_service}
      - TASKDEF_NAME=${build_vars_taskdef}
      - BUILD_ENV=${build_vars_environment}
      - DOMAIN_ROOT=${build_vars_domain_root}
      - IMAGE_PREFIX="${build_vars_container_image_prefix}"
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
      - AWS_DEFAULT_REGION="ap-northeast-1"

      - NGINX_IMAGE_URI="${IMAGE_PREFIX}/${SERVICE_NAME}/${NGINX_APP_NAME}"
      - NGINX_ENVIRONMENT_DIR="./docker/${BUILD_ENV}/${NGINX_APP_NAME}"

      - APP_IMAGE_URI="${IMAGE_PREFIX}/${SERVICE_NAME}/${APP_APP_NAME}"
      - APP_ENVIRONMENT_DIR="./docker/${BUILD_ENV}/${APP_APP_NAME}"

      ## Login
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

  build:
    commands:
      ## nginx.conf
      - cat ${NGINX_ENVIRONMENT_DIR}/config/nginx.conf

      ## Build
      - |
        docker build -t ${NGINX_IMAGE_URI}:latest -f ${NGINX_ENVIRONMENT_DIR}/Dockerfile ${NGINX_DOCKER_BUILD_PATH} \
          --build-arg BUILD_ENV=${BUILD_ENV}

      - |
        docker build -t ${APP_IMAGE_URI}:latest -f ${APP_ENVIRONMENT_DIR}/Dockerfile ${APP_DOCKER_BUILD_PATH} \
          --build-arg BUILD_ENV=${BUILD_ENV} \
          --build-arg DOMAIN_ROOT=${DOMAIN_ROOT}

  post_build:
    commands:
      - docker images
      - docker push ${NGINX_IMAGE_URI}:latest
      - docker push ${APP_IMAGE_URI}:latest

      # [DO NOT EDIT]--------------------------------------------
      # (Refresh service)
      - aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition ${TASKDEF_NAME} --force-new-deployment
      # ---------------------------------------------------------